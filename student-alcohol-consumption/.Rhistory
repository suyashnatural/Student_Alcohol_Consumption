layout(title = "Age vs Risk")
print("Number of students of each age:")
table(students11$age)
table(students11$age) / len_df
print("Correlation between age and risk")
cor(students11$age, as.numeric(students11$Risk))
students11$ageSimple <- 0
students11$ageSimple[students11$age >= 19] <- 1
students11$Pstatus <- factor(students11$Pstatus, levels = c("A","T"), 
labels = c("Apart", "Together"))
m1 <- plot_ly(students11, x=~Pstatus, color = ~Risk, type = "histogram",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = list(title = "Parents' Marriage Status"))
abcd <- data.frame(prop.table(table(students11$Risk, students11$Pstatus),1))
m2 <-plot_ly(abcd, x=abcd$Var1, y =~Freq, color = abcd$Var2, type = "bar",
marker = list(line = list(color = "white", width = 1)),
showlegend = FALSE) %>%
layout(barmode = "stack",
xaxis = risk)
subplot(m1,m2, margin = 0.04, titleX = TRUE) %>%
layout(title = "Parents' Marriage Status vs Risk",
yaxis = ns,
margin = m)
print("Number of students of each parental marriage status group:")
table(students11$Pstatus)
table(students11$Pstatus)/len_df
students11$Fjob <- factor(students11$Fjob, levels = c("at_home","health","other","services","teacher"), 
labels = c("At_Home", "Health","Other","Services","Teacher"))
f1 <- plot_ly(students11, x=~Fjob, color = ~Risk, type = "histogram",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = list(title = "Type of Father's job"))
xy <- data.frame(prop.table(table(students11$Risk, students11$Fjob),1))
f2 <-plot_ly(xy, x=xy$Var1, y =~Freq, color = xy$Var2, type = "bar",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = risk)
subplot(f1,f2, margin = 0.04, titleX = TRUE) %>%
layout(title = "Father's Job Type vs Risk",
yaxis = ns,
margin = m)
View(students11)
students11$Fjob <- studentsnorepeats$Fjob
students11$Fjob <- factor(students11$Fjob, levels = c("at_home","health","other","services","teacher"), 
labels = c("At_Home", "Health","Other","Services","Teacher"))
f1 <- plot_ly(students11, x=~Fjob, color = ~Risk, type = "histogram",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = list(title = "Type of Father's job"))
xy <- data.frame(prop.table(table(students11$Risk, students11$Fjob),1))
f2 <-plot_ly(xy, x=xy$Var1, y =~Freq, color = xy$Var2, type = "bar",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = risk)
subplot(f1,f2, margin = 0.04, titleX = TRUE) %>%
layout(title = "Father's Job Type vs Risk",
yaxis = ns,
margin = m)
print("Number of students for each type of job (Father):")
table(students11$Fjob)
table(students11$Fjob)/len_df
students11$FjobSimple <- 0 
students11$FjobSimple[df$Fjob == 'Services'] <- 1
students11$famsup <- factor(students11$famsup, levels = c("no","yes"), labels = c("No", "Yes"))
fs <- plot_ly(students11, x=~famsup, color = ~Risk, type = "histogram",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = list(title = "Educational Support from Family"))
fps <- data.frame(prop.table(table(students11$Risk, students11$famsup),1))
fs1 <-plot_ly(fps, x=fps$Var1, y =~Freq, color = fps$Var2, type = "bar",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = risk)
subplot(fs,fs1, margin = 0.04, titleX = TRUE) %>%
layout(title = "Educational Support From Family vs Risk",
yaxis = ns,
margin = m)
print("Number of students for each educational support group:")
table(students11$famsup)
table(students11$famsup)/len_df
students11$goout <- factor(students11$goout, levels = c("1","2","3","4","5"),
labels = c("Very Low","Low","Average","High","Very High"))
go <- plot_ly(students11, x=~goout, color = ~Risk, type = "histogram",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = list(title = "Frequency of Going Out with Friends"))
g <- data.frame(prop.table(table(students11$Risk, students11$goout),1))
go1 <-plot_ly(g, x=g$Var1, y =~Freq, color = g$Var2, type = "bar",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = risk)
subplot(go,go1, margin = 0.04, titleX = TRUE) %>%
layout(title = "Frequency of Going Out with Friends vs Risk",
yaxis = ns,
margin = m)
print("Number of students for each social group:")
table(students11$goout)
table(students11$goout)/len_df
students11$studytime <- studentsnorepeats$studytime
students11$studytime <- factor(students11$studytime, levels = c("1","2","3","4"), 
labels = c("Less than 2 Hours", "2 to 5 Hours","5 to 10 Hours",
"More than 10 Hours"))
st <- plot_ly(students11, x= ~studytime, color = ~Risk, type = "histogram",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = list(title = "Time Spent Studying (Weekly)"))
st
stime <- data.frame(prop.table(table(students11$Risk, students11$studytime),1))
st1 <-plot_ly(stime, x=stime$Var1, y =~Freq, color = stime$Var2, type = "bar",
marker = list(line = list(color = "white", width = 1))) %>%
layout(barmode = "stack",
xaxis = risk)
subplot(st,st1, margin = 0.04, titleX = TRUE) %>%
layout(title = "Time Spent Studying vs Risk",
yaxis = ns,
margin = m)
print("Number of students for each study time group:")
table(students11$studytime)
table(students11$studytime)/len_df
ggplotly(ggplot(aes(Risk, as.numeric(studytime)), data = students11) +
geom_violin(alpha = 0.3, color = I("Red"), fill = I("Red")) +
geom_boxplot(alpha = 0.5, color = I("black")) +
geom_point(position = position_jitter(width = 0.5, height = 0.1), 
color = I("blue"),
alpha = 0.4) +
ylab("Time Spent Studying (Groupings)") +
ggtitle("Time Spent Studying vs Risk")) %>%
layout(margin = list(pad = 0,
l = 60))
by(as.numeric(students11$studytime), students11$Risk, summary)
print("Correlation between time spent studying and risk:")
cor(as.numeric(students11$studytime), as.numeric(students11$Risk))
ggplot(aes(as.numeric(goout), as.numeric(studytime), color = Risk), data = students11) +
geom_jitter() +
geom_smooth(se = FALSE, method = 'lm') +
ggtitle("Going Out vs Studying Time vs Risk") +
xlab("Frequency of Going Out with Friends") +
ylab("Time Spent Studying")
students11$studytimeSimple <- 0
students11$studytimeSimple[as.numeric(students11$studytime) == 1] <- 1
ggplot(aes(as.numeric(goout), as.numeric(studytime), color = Risk), data = students11) +
geom_jitter() +
geom_smooth(se = FALSE, method = 'lm') +
ggtitle("Going Out vs Studying Time vs Risk") +
xlab("Frequency of Going Out with Friends") +
ylab("Time Spent Studying")
students11$gooutStudy <- 0
students11$gooutStudy[as.numeric(students11$goout) == 5 & as.numeric(students11$studytime) == 1] <- 1
dataset <- read.csv("Salary.csv",stringsAsFactors = FALSE)
dataset <- read.csv("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/Salary.csv",stringsAsFactors = FALSE)
library(rpart)
summary(dataset)
View(dataset)
fit <- rpart(dataset$Salary ~ dataset$Occupation + dataset$Gender + dataset$Age,
method="class", data=dataset)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE,
main="Classification Tree for Salary dataset")
fit <- rpart(dataset$Salary ~.,
method="class", data=dataset)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Salary dataset")
fit <- rpart(dataset$Salary ~ dataset$Occupation + dataset$Gender + dataset$Age,
method="class", data=dataset)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Salary dataset")
fit <- rpart(dataset$Salary ~ dataset$Occupation + dataset$Gender + dataset$Age,
method="class", data=dataset, control=rpart.control(minsplit=2, minbucket=1, cp=0.001))
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Salary dataset")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
dataset <- read.csv("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/Salary.csv",stringsAsFactors = FALSE)
cluster_dataset <- read.csv("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/Cluster_Test.csv",stringsAsFactors = FALSE)
summary(cluster_dataset)
View(cluster_dataset)
x <- cluster_dataset$median_house_value
normalize <- (x-min(x))/(max(x)-min(x))
hist(cluster_dataset$median_house_value, breaks=10, xlab="median_house_value", col="lightblue", main="")
hist(normalize, breaks=10, xlab="Normalized median_house_value", col="lightblue", main="")
hist(cluster_dataset$median_house_value, breaks=10, xlab="median_house_value", col="lightblue", main="")
hist(normalize, breaks=10, xlab="Normalized median_house_value", col="lightblue", main="")
x <- cluster_dataset$median_house_value
normalize <- (x-min(x))/(max(x)-min(x))
hist(cluster_dataset$median_house_value, breaks=10, xlab="median_house_value", col="lightblue", main="After Normalization")
hist(cluster_dataset$median_house_value, breaks=10, xlab="median_house_value", col="lightblue", main="Before Normalization")
hist(normalize, breaks=10, xlab="median_house_value", col="lightblue", main="After Normalization")
x <- cluster_dataset$total_rooms
normalize <- (x-min(x))/(max(x)-min(x))
hist(cluster_dataset$total_rooms, breaks=10, xlab="total_rooms", col="lightblue", main="Before Normalization")
hist(normalize, breaks=10, xlab="total_rooms", col="lightblue", main="After Normalization")
hist(cluster_dataset$total_rooms, breaks=10, xlab="total_rooms", col="lightblue", main="Before Normalization")
hist(normalize, breaks=10, xlab="total_rooms", col="lightblue", main="After Normalization")
x <- cluster_dataset$total_bedrooms
normalize <- (x-min(x))/(max(x)-min(x))
hist(cluster_dataset$total_bedrooms, breaks=10, xlab="total_bedrooms", col="lightblue", main="Before Normalization")
hist(normalize, breaks=10, xlab="total_bedrooms", col="lightblue", main="After Normalization")
x <- cluster_dataset$population
normalize <- (x-min(x))/(max(x)-min(x))
hist(cluster_dataset$population, breaks=10, xlab="population", col="lightblue", main="Before Normalization")
hist(normalize, breaks=10, xlab="population", col="lightblue", main="After Normalization")
x <- cluster_dataset$households
normalize <- (x-min(x))/(max(x)-min(x))
hist(cluster_dataset$households, breaks=10, xlab="households", col="lightblue", main="Before Normalization")
hist(normalize, breaks=10, xlab="households", col="lightblue", main="After Normalization")
library(cluster)
library(cluster)
View(cluster_dataset)
medhouseclusters <- kmeans(cluster_dataset$median_house_value, centers = 5)
bin1<- rownames(cluster_dataset[ medhouseclusters$cluster==1,])
bin2 <- rownames(cluster_dataset[ medhouseclusters$cluster==2,])
bin3 <- rownames(cluster_dataset[ medhouseclusters$cluster==3,])
bin4 <- rownames(cluster_dataset[ medhouseclusters$cluster==4,])
bin5 <- rownames(cluster_dataset[ medhouseclusters$cluster==5,])
bin1meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin1)])
bin2meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin2)])
bin3meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin3)])
bin4meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin4)])
bin5meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin5)])
library(arules)
dat = read.table("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/shark.csv",
sep=",",header=F,
fill=FALSE,strip.white=T)
dat
testing <- as(dat[,-c(1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14)], "transactions")
rules <- apriori(testing,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
View(dat)
testing <- as(dat[,-c(1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14)], "transactions")
View(testing)
testing <- as(dat[,-c(1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14)], "transactions")
rules <- apriori(testing,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
shark <- read.table("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/shark.csv",
sep=",",header=F,
fill=FALSE,strip.white=T)
View(shark)
transactions_object <- as(shark[,-c(1, 2, 3, 4, 5, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
km <- kmeans(cluster_dataset, centers = 5)
km
library(cluster)
View(cluster_dataset)
medhouseclusters <- kmeans(cluster_dataset$median_house_value, centers = 5)
whichbin <- medhouseclusters$cluster;
bin1<- rownames(cluster_dataset[ medhouseclusters$cluster==1,])
bin2 <- rownames(cluster_dataset[ medhouseclusters$cluster==2,])
bin3 <- rownames(cluster_dataset[ medhouseclusters$cluster==3,])
bin4 <- rownames(cluster_dataset[ medhouseclusters$cluster==4,])
bin5 <- rownames(cluster_dataset[ medhouseclusters$cluster==5,])
bin1meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin1)])
bin2meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin2)])
bin3meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin3)])
bin4meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin4)])
bin5meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin5)])
medianHouseCat <- c("-1", "-1", "-1", "-1", "-1")
maxMean <- max(bin1meantemp,bin2meantemp, bin3meantemp, bin4meantemp, bin5meantemp)
minMean <- min(bin1meantemp,bin2meantemp, bin3meantemp, bin4meantemp, bin5meantemp)
if(bin1meantemp == maxMean){
medianHouseCat[1]="HIGH"
}else{
medianHouseCat[1]="LOW"
}
if(bin2meantemp == maxMean){
medianHouseCat[1]="HIGH"
}else{
medianHouseCat[1]="LOW"
}
if(bin3meantemp == maxMean){
medianHouseCat[1]="HIGH"
}else{
medianHouseCat[1]="LOW"
}
if(bin4meantemp == maxMean){
medianHouseCat[1]="HIGH"
}else{
medianHouseCat[1]="LOW"
}
if(bin5meantemp == maxMean){
medianHouseCat[1]="HIGH"
}else{
medianHouseCat[1]="LOW"
}
for(i in 1:nrow(cluster_dataset)){
if(whichbin[i]==1){
cluster_dataset$medianHouseCat[i] <- medianHouseCat[1]
}
else if(whichbin[i]==2){
cluster_dataset$medianHouseCat[i] <- medianHouseCat[2]
}
else if(whichbin[i]==3){
cluster_dataset$medianHouseCat[i] <- medianHouseCat[3]
}
else if(whichbin[i]==4){
cluster_dataset$medianHouseCat[i] <- medianHouseCat[4]
}
else if(whichbin[i]==5){
cluster_dataset$medianHouseCat[i] <- medianHouseCat[5]
}
}
library(fpc)
plotcluster(cluster_dataset$medianHouseCat,medhouseclusters$cluster)
medhouseclusters <- kmeans(cluster_dataset$median_house_value, centers = 3)
whichbin <- medhouseclusters$cluster;
library(cluster)
View(cluster_dataset)
medhouseclusters <- kmeans(cluster_dataset$median_house_value, centers = 3)
whichbin <- medhouseclusters$cluster;
bin1<- rownames(cluster_dataset[ medhouseclusters$cluster==1,])
bin2 <- rownames(cluster_dataset[ medhouseclusters$cluster==2,])
bin3 <- rownames(cluster_dataset[ medhouseclusters$cluster==3,])
bin1meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin1)])
bin2meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin2)])
bin3meantemp <- mean(cluster_dataset$median_house_value[which(rownames(cluster_dataset) %in% bin3)])
medianHouseCat <- c("-1", "-1", "-1")
maxMean <- max(bin1meantemp,bin2meantemp, bin3meantemp)
minMean <- min(bin1meantemp,bin2meantemp, bin3meantemp)
if(bin1meantemp == maxMean){
medianHouseCat[1]="HIGH"
}else{
medianHouseCat[1]="LOW"
}
if(bin2meantemp == maxMean){
medianHouseCat[1]="HIGH"
}else{
medianHouseCat[1]="LOW"
}
if(bin3meantemp == maxMean){
medianHouseCat[1]="HIGH"
}else{
medianHouseCat[1]="LOW"
}
for(i in 1:nrow(cluster_dataset)){
if(whichbin[i]==1){
cluster_dataset$medianHouseCat[i] <- medianHouseCat[1]
}
else if(whichbin[i]==2){
cluster_dataset$medianHouseCat[i] <- medianHouseCat[2]
}
else if(whichbin[i]==3){
cluster_dataset$medianHouseCat[i] <- medianHouseCat[3]
}
}
library(fpc)
plotcluster(cluster_dataset$medianHouseCat,medhouseclusters$cluster)
shark <- read.table("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/shark.csv",
sep=",",header=F,
fill=FALSE,strip.white=T)
transactions_object <- as(shark[,-c(2, 3, 4, 5, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
rules <- apriori(transactions_object,
parameter = list(sup = 0.005 , conf = 0.5, target="rules"),
appearance = list(rhs = c("Attack=Y", "Attack=N"),
default = "lhs"),
control = list(verbose=F))
shark <- read.table("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/shark.csv",
sep=",",header=F,
fill=FALSE,strip.white=T)
View(shark)
transactions_object <- as(shark[,-c(1, 2, 3, 4, 5, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(sup = 0.005 , conf = 0.5, target="rules"),
appearance = list(rhs = c("Attack=Y", "Attack=N"),
default = "lhs"),
control = list(verbose=F))
shark <- read.table("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/shark.csv",
sep=",",header=F,
fill=FALSE,strip.white=T)
transactions_object <- as(shark[,-c(2, 3, 4, 5,6, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
rules <- apriori(transactions_object,
parameter = list(sup = 0.005 , conf = 0.5, target="rules"),
appearance = list(rhs = c("Attack=Y", "Attack=N"),
default = "lhs"),
control = list(verbose=F))
shark <- read.table("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/shark.csv",
sep=",",header=F,
fill=FALSE,strip.white=T)
transactions_object <- as(shark[,-c(2, 3, 4, 5,6, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
transactions_object <- as(shark[,-c(1, 2, 3, 4, 5,6, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
shark <- read.table("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/shark.csv",
sep=",",header=F,
fill=FALSE,strip.white=T)
transactions_object <- as(shark[,-c(1, 2, 3, 4, 5, 6, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
transactions_object <- as(shark[,-c(1, 2, 3, 4, 5, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3),
appearance = list(rhs = c("Attack=Y", "Attack=N"),
default = "lhs"))
transactions_object <- as(shark[,-c(2, 3, 4, 5, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3),
appearance = list(rhs = c("Attack=Y", "Attack=N"),
default = "lhs"))
class(shark$V1)
rules <- apriori(shark,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3),
appearance = list(rhs = c("Attack=Y", "Attack=N"),
default = "lhs"))
transactions_object <- as(shark[,-c(1, 2, 3, 4, 5, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.15,
conf = 0.80,
maxlen = 3))
inspect(sort(rules))
View(dataset_for_association)
inspect(rules.sorted)
transactions_object <- as(shark[,-c(2, 3, 4, 5, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.10,
conf = 0.10,
maxlen = 3))
inspect(sort(rules))
library(arulesViz)
plot(rules)
rules <- apriori(transactions_object,
parameter = list(supp = 0.80,
conf = 0.10,
maxlen = 3))
inspect(sort(rules))
rules <- apriori(transactions_object,
parameter = list(supp = 0.10,
conf = 0.10,
maxlen = 3),
appearance = list(rhs = c("V1=Y", "V1=N"),
default = "lhs"))
shark <- read.table("/Users/suyashnande/Downloads/Summer2017FinalExamApplied/shark.csv",
sep=",",header=F,
fill=FALSE,strip.white=T)
transactions_object <- as(shark[,-c(2, 3, 4, 5, 7, 8, 9, 11)], "transactions")
rules <- apriori(transactions_object,
parameter = list(supp = 0.10,
conf = 0.10,
maxlen = 3))
inspect(sort(rules))
rules <- apriori(transactions_object,
parameter = list(supp = 0.10,
conf = 0.15,
maxlen = 3))
inspect(sort(rules))
library(arulesViz)
plot(rules)
rules <- apriori(transactions_object,
parameter = list(supp = 0.10,
conf = 0.15,
maxlen = 3),
appearance = list(rhs = c("V1=No", "V1=Yes"),
default = "lhs"),
control = list(verbose=F))
inspect(sort(rules))
library(arulesViz)
plot(rules)
